
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Aug 03 11:32:27 CEST 2007
//----------------------------------------------------

package model;

import java.util.Iterator;
import java.util.Vector;
import java.awt.Color;
import java_cup.runtime.*;

import java.io.FileInputStream;
import java.io.InputStream;
import editor.Editor;
import model.Transform;
import model.Point;
import model.Transform;
import matrix.Matrix;

/** CUP v0.10k generated parser.
  * @version Fri Aug 03 11:32:27 CEST 2007
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();} 

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}
  public parser(FileInputStream fs) {super(new Lexer(fs));} 

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\003\010\000\002\002\004\000\002\003" +
    "\007\000\002\003\007\000\002\003\006\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\006\000\002\004" +
    "\003\000\002\004\005\000\002\021\006\000\002\022\003" +
    "\000\002\022\005\000\002\020\005\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\007\012\000\002\010\011\000\002\011" +
    "\007\000\002\012\007\000\002\013\007\000\002\015\010" +
    "\000\002\014\010\000\002\016\010\000\002\017\010\000" +
    "\002\036\003\000\002\036\005\000\002\034\006\000\002" +
    "\046\011\000\002\047\011\000\002\035\005\000\002\037" +
    "\003\000\002\037\005\000\002\040\006\000\002\043\006" +
    "\000\002\045\006\000\002\032\006\000\002\033\006\000" +
    "\002\031\006\000\002\041\007\000\002\041\007\000\002" +
    "\053\006\000\002\050\006\000\002\051\006\000\002\052" +
    "\006\000\002\024\005\000\002\024\004\000\002\025\005" +
    "\000\002\025\004\000\002\026\005\000\002\026\004\000" +
    "\002\027\005\000\002\027\004\000\002\030\005\000\002" +
    "\030\004\000\002\030\005\000\002\030\004\000\002\044" +
    "\005\000\002\042\003\000\002\042\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\004\004\001\002\000\024\011\026\012" +
    "\020\013\010\014\007\015\023\016\031\017\025\020\013" +
    "\021\022\001\002\000\004\002\006\001\002\000\004\002" +
    "\000\001\002\000\004\010\315\001\002\000\004\010\311" +
    "\001\002\000\004\004\ufffb\001\002\000\004\004\ufff5\001" +
    "\002\000\004\010\304\001\002\000\004\004\ufff7\001\002" +
    "\000\004\004\152\001\002\000\004\004\ufff8\001\002\000" +
    "\004\004\ufffc\001\002\000\004\010\133\001\002\000\004" +
    "\004\ufff9\001\002\000\004\010\126\001\002\000\004\010" +
    "\122\001\002\000\004\004\ufff6\001\002\000\004\010\115" +
    "\001\002\000\004\010\071\001\002\000\004\004\ufff4\001" +
    "\002\000\004\004\ufffa\001\002\000\004\010\032\001\002" +
    "\000\004\004\033\001\002\000\004\032\066\001\002\000" +
    "\004\004\035\001\002\000\004\031\051\001\002\000\004" +
    "\004\037\001\002\000\004\034\046\001\002\000\004\004" +
    "\041\001\002\000\004\036\043\001\002\000\004\004\uffe1" +
    "\001\002\000\004\050\044\001\002\000\004\005\045\001" +
    "\002\000\004\004\uffcc\001\002\000\004\050\047\001\002" +
    "\000\004\005\050\001\002\000\004\004\uffce\001\002\000" +
    "\006\047\053\050\052\001\002\000\004\030\062\001\002" +
    "\000\004\030\056\001\002\000\004\005\055\001\002\000" +
    "\004\004\uffd3\001\002\000\004\047\057\001\002\000\004" +
    "\030\060\001\002\000\004\047\061\001\002\000\004\005" +
    "\uffd0\001\002\000\004\050\063\001\002\000\004\030\064" +
    "\001\002\000\004\050\065\001\002\000\004\005\uffcf\001" +
    "\002\000\006\047\053\050\052\001\002\000\004\005\070" +
    "\001\002\000\004\004\uffd1\001\002\000\004\004\033\001" +
    "\002\000\004\004\035\001\002\000\004\004\074\001\002" +
    "\000\004\042\075\001\002\000\004\006\077\001\002\000" +
    "\006\005\113\030\112\001\002\000\004\004\102\001\002" +
    "\000\006\005\uffde\030\uffde\001\002\000\006\007\110\030" +
    "\107\001\002\000\004\045\104\001\002\000\006\007\uffd8" +
    "\030\uffd8\001\002\000\006\047\053\050\052\001\002\000" +
    "\004\005\106\001\002\000\006\007\uffd6\030\uffd6\001\002" +
    "\000\004\004\102\001\002\000\006\005\uffd9\030\uffd9\001" +
    "\002\000\006\007\uffd7\030\uffd7\001\002\000\004\006\077" +
    "\001\002\000\004\004\uffe7\001\002\000\006\005\uffdd\030" +
    "\uffdd\001\002\000\004\004\033\001\002\000\004\004\035" +
    "\001\002\000\004\004\037\001\002\000\004\004\041\001" +
    "\002\000\004\004\uffe2\001\002\000\004\004\033\001\002" +
    "\000\004\004\035\001\002\000\004\004\037\001\002\000" +
    "\004\004\uffe3\001\002\000\004\004\033\001\002\000\004" +
    "\004\035\001\002\000\004\004\037\001\002\000\004\004" +
    "\041\001\002\000\004\004\uffdf\001\002\000\004\004\033" +
    "\001\002\000\004\004\035\001\002\000\004\004\137\001" +
    "\002\000\004\004\041\001\002\000\004\035\140\001\002" +
    "\000\004\050\141\001\002\000\004\005\142\001\002\000" +
    "\004\004\uffcd\001\002\000\004\004\145\001\002\000\004" +
    "\004\uffe6\001\002\000\004\037\146\001\002\000\004\050" +
    "\147\001\002\000\004\005\150\001\002\000\004\004\uffcb" +
    "\001\002\000\004\004\277\001\002\000\006\043\250\046" +
    "\251\001\002\000\006\004\156\005\155\001\002\000\004" +
    "\005\247\001\002\000\010\002\ufffd\005\ufffd\030\ufffd\001" +
    "\002\000\004\044\157\001\002\000\004\004\162\001\002" +
    "\000\006\005\245\030\244\001\002\000\006\005\uffef\030" +
    "\uffef\001\002\000\016\022\167\023\172\024\176\025\175" +
    "\026\165\027\171\001\002\000\004\005\uffea\001\002\000" +
    "\004\005\uffec\001\002\000\006\006\177\010\241\001\002" +
    "\000\004\005\uffe9\001\002\000\006\004\233\010\234\001" +
    "\002\000\004\005\uffe8\001\002\000\006\006\177\010\227" +
    "\001\002\000\006\004\221\010\222\001\002\000\004\005" +
    "\uffeb\001\002\000\004\005\217\001\002\000\006\004\210" +
    "\010\211\001\002\000\006\006\177\010\200\001\002\000" +
    "\004\010\203\001\002\000\004\006\177\001\002\000\004" +
    "\005\uffc3\001\002\000\004\005\uffc4\001\002\000\006\007" +
    "\uffbd\030\uffbd\001\002\000\006\007\206\030\205\001\002" +
    "\000\004\010\207\001\002\000\004\005\uffbe\001\002\000" +
    "\006\007\uffbc\030\uffbc\001\002\000\004\041\214\001\002" +
    "\000\004\004\210\001\002\000\004\005\uffc5\001\002\000" +
    "\004\005\uffc6\001\002\000\006\047\053\050\052\001\002" +
    "\000\004\005\216\001\002\000\004\005\uffd4\001\002\000" +
    "\006\005\uffed\030\uffed\001\002\000\004\005\uffc7\001\002" +
    "\000\004\040\224\001\002\000\004\004\221\001\002\000" +
    "\004\005\uffc8\001\002\000\006\047\053\050\052\001\002" +
    "\000\004\005\226\001\002\000\004\005\uffd5\001\002\000" +
    "\004\006\177\001\002\000\004\005\uffbf\001\002\000\004" +
    "\005\uffc0\001\002\000\004\005\uffc9\001\002\000\004\033" +
    "\236\001\002\000\004\004\233\001\002\000\004\005\uffca" +
    "\001\002\000\006\047\053\050\052\001\002\000\004\005" +
    "\240\001\002\000\004\005\uffd2\001\002\000\004\006\177" +
    "\001\002\000\004\005\uffc1\001\002\000\004\005\uffc2\001" +
    "\002\000\004\004\162\001\002\000\004\005\ufff0\001\002" +
    "\000\006\005\uffee\030\uffee\001\002\000\010\002\ufffe\005" +
    "\ufffe\030\ufffe\001\002\000\004\004\004\001\002\000\004" +
    "\006\253\001\002\000\004\005\271\001\002\000\004\006" +
    "\255\001\002\000\004\030\264\001\002\000\004\047\256" +
    "\001\002\000\004\030\257\001\002\000\004\047\260\001" +
    "\002\000\004\030\261\001\002\000\004\047\262\001\002" +
    "\000\004\007\263\001\002\000\006\007\uffda\030\uffda\001" +
    "\002\000\004\006\255\001\002\000\004\030\266\001\002" +
    "\000\004\006\255\001\002\000\004\007\270\001\002\000" +
    "\004\005\uffdb\001\002\000\006\004\uffdc\005\uffdc\001\002" +
    "\000\006\005\275\030\274\001\002\000\006\005\ufff2\030" +
    "\ufff2\001\002\000\004\004\004\001\002\000\004\004\ufff3" +
    "\001\002\000\006\005\ufff1\030\ufff1\001\002\000\004\046" +
    "\251\001\002\000\006\004\156\005\302\001\002\000\004" +
    "\005\303\001\002\000\010\002\uffff\005\uffff\030\uffff\001" +
    "\002\000\010\002\001\005\001\030\001\001\002\000\004" +
    "\004\033\001\002\000\004\004\035\001\002\000\004\004" +
    "\037\001\002\000\004\004\041\001\002\000\004\004\uffe0" +
    "\001\002\000\004\004\033\001\002\000\004\004\035\001" +
    "\002\000\004\004\037\001\002\000\004\004\uffe5\001\002" +
    "\000\004\004\033\001\002\000\004\004\035\001\002\000" +
    "\004\004\037\001\002\000\004\004\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\003\004\001\001\000\026\005\014\007" +
    "\016\010\010\011\027\012\020\013\015\014\023\015\013" +
    "\016\011\017\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\150\034\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\033\001\001\000\002\001\001" +
    "\000\004\032\035\001\001\000\002\001\001\000\004\053" +
    "\037\001\001\000\002\001\001\000\004\051\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\071" +
    "\001\001\000\004\032\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\077\036\075\001\001\000\002" +
    "\001\001\000\006\037\100\040\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\115\001\001\000\004\032\116" +
    "\001\001\000\004\053\117\001\001\000\004\051\120\001" +
    "\001\000\002\001\001\000\004\031\122\001\001\000\004" +
    "\032\123\001\001\000\004\053\124\001\001\000\002\001" +
    "\001\000\004\031\126\001\001\000\004\032\127\001\001" +
    "\000\004\053\130\001\001\000\004\051\131\001\001\000" +
    "\002\001\001\000\004\031\133\001\001\000\004\032\134" +
    "\001\001\000\004\050\135\001\001\000\004\051\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\277\001\001\000\002\001" +
    "\001\000\004\021\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\160\022\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\023\173" +
    "\024\163\025\172\026\165\027\162\030\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\241\001\001" +
    "\000\002\001\001\000\004\033\231\001\001\000\002\001" +
    "\001\000\004\044\227\001\001\000\004\043\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\211\001" +
    "\001\000\004\044\200\001\001\000\004\042\203\001\001" +
    "\000\004\044\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\222\001\001\000\002\001\001\000\004\041" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\234\001\001" +
    "\000\002\001\001\000\004\041\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\272\004\271\001\001\000\004\046\251\001\001\000" +
    "\002\001\001\000\004\047\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\264\001\001\000\002\001\001\000" +
    "\004\047\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\275\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\304" +
    "\001\001\000\004\032\305\001\001\000\004\053\306\001" +
    "\001\000\004\051\307\001\001\000\002\001\001\000\004" +
    "\031\311\001\001\000\004\032\312\001\001\000\004\053" +
    "\313\001\001\000\002\001\001\000\004\031\315\001\001" +
    "\000\004\032\316\001\001\000\004\053\317\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 /* non need to init anything */ 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NameList ::= NameList COMA NAME 
            {
              Object RESULT = null;
		int _lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								// the vector has been instantiated by the trailing name
								((Vector)_l).add(_n);
								RESULT = _l;
							
              CUP$parser$result = new java_cup.runtime.Symbol(32/*NameList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NameList ::= NAME 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = new Vector();
								((Vector)RESULT).add(_n);
							
              CUP$parser$result = new java_cup.runtime.Symbol(32/*NameList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NameListBlock ::= ARRAY_BEGIN NameList ARRAY_END 
            {
              Object RESULT = null;
		int _lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=_l;
              CUP$parser$result = new java_cup.runtime.Symbol(34/*NameListBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ReparentDescription ::= REMOVE_CHILDREN NameListBlock 
            {
              Object RESULT = null;
		int _lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Transform t = new Transform();
								RESULT = t.new RemoveChildren((Vector)_l);
							
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ReparentDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ReparentDescription ::= REMOVE_CHILDREN NAME NameListBlock 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Transform t = new Transform();
								RESULT = t.new RemoveChildren((String)_n, (Vector)_l);
							
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ReparentDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ReparentDescription ::= ADD_CHILDREN NameListBlock 
            {
              Object RESULT = null;
		int _lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Transform t = new Transform();
								RESULT = t.new AddChildren((Vector)_l);
							
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ReparentDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ReparentDescription ::= ADD_CHILDREN NAME NameListBlock 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Transform t = new Transform();
								RESULT = t.new AddChildren((String)_n, (Vector)_l);
							
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ReparentDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CompositionDescription ::= COMPOSITION NameListBlock 
            {
              Object RESULT = null;
		int _lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Transform t = new Transform();
								RESULT = t.new Composition((Vector)_l);
							
              CUP$parser$result = new java_cup.runtime.Symbol(21/*CompositionDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CompositionDescription ::= COMPOSITION NAME NameListBlock 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Transform t = new Transform();
								RESULT = t.new Composition((String)_n, (Vector)_l);
							
              CUP$parser$result = new java_cup.runtime.Symbol(21/*CompositionDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ScalingDescription ::= SCALING ScaleDelta 
            {
              Object RESULT = null;
		int _dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Transform t = new Transform();
								RESULT = t.new Scaling((Point)_d);
							
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ScalingDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ScalingDescription ::= SCALING NAME ScaleDelta 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Transform t = new Transform();
								RESULT = t.new Scaling((String)_n, (Point)_d);
							
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ScalingDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TranslationDescription ::= TRANSLATION MoveDelta 
            {
              Object RESULT = null;
		int _dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Transform t = new Transform();
								RESULT = t.new Translation((Point)_d);
							
              CUP$parser$result = new java_cup.runtime.Symbol(19/*TranslationDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TranslationDescription ::= TRANSLATION NAME MoveDelta 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Transform t = new Transform();
								RESULT = t.new Translation((String)_n, (Point)_d);
							
              CUP$parser$result = new java_cup.runtime.Symbol(19/*TranslationDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RotationDescription ::= ROTATION Angle 
            {
              Object RESULT = null;
		int _aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Transform t = new Transform();
								RESULT = t.new Rotation((Point)_a);
							
              CUP$parser$result = new java_cup.runtime.Symbol(18/*RotationDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RotationDescription ::= ROTATION NAME Angle 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Transform t = new Transform();
								RESULT = t.new Rotation((String)_n, (Point)_a);
							
              CUP$parser$result = new java_cup.runtime.Symbol(18/*RotationDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Depth ::= BLOCK_BEGIN DEPTH INTEGER BLOCK_END 
            {
              Integer RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							// #### debug
							System.out.println("found depth: " + _n.toString());
						
							RESULT = _n;
						
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Depth*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Height ::= BLOCK_BEGIN HEIGHT INTEGER BLOCK_END 
            {
              Integer RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							// #### debug
							System.out.println("found height: " + _n.toString());

							RESULT = _n;
						
              CUP$parser$result = new java_cup.runtime.Symbol(39/*Height*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Width ::= BLOCK_BEGIN WIDTH INTEGER BLOCK_END 
            {
              Integer RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							// #### debug
							System.out.println("found width: " + _n.toString());

							RESULT = _n;
						
              CUP$parser$result = new java_cup.runtime.Symbol(38/*Width*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Radius ::= BLOCK_BEGIN RADIUS INTEGER BLOCK_END 
            {
              Integer RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
							// #### debug
							System.out.println("found radius: " + _n.toString());

							RESULT = _n;
						
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Radius*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Triplet ::= INTEGER COMA INTEGER COMA INTEGER 
            {
              Object RESULT = null;
		int _n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer _n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer _n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _n3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							// #### debug
							System.out.println("found Triplet: " + _n1.toString() + ", " + _n2.toString() + ", " + _n3.toString());
						
							RESULT = new Point(((Integer)_n1).intValue(), ((Integer)_n2).intValue(), ((Integer)_n3).intValue());
						
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Triplet*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Triplet ::= DOUBLE COMA DOUBLE COMA DOUBLE 
            {
              Object RESULT = null;
		int _n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _n3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _n3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _n3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							// #### debug
							System.out.println("found Triplet: " + _n1.toString() + ", " + _n2.toString() + ", " + _n3.toString());
						
							RESULT = new Point(((Double)_n1).doubleValue(), ((Double)_n2).doubleValue(), ((Double)_n3).doubleValue());
						
              CUP$parser$result = new java_cup.runtime.Symbol(31/*Triplet*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Color ::= BLOCK_BEGIN COLOR Triplet BLOCK_END 
            {
              Object RESULT = null;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
							Point p = (Point)_t;
							Color c = new Color((int)p.getX(), (int)p.getY(), (int)p.getZ());

							// #### debug
							System.out.println("found color: " + new Float(p.getX()).toString() + ", " + new Float(p.getY()).toString() + ", " + new Float(p.getZ()).toString());

							RESULT = c;
						
              CUP$parser$result = new java_cup.runtime.Symbol(23/*Color*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Angle ::= BLOCK_BEGIN ANGLE Triplet BLOCK_END 
            {
              Object RESULT = null;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
							// #### debug
							Point p = (Point)_t;
							System.out.println("found angle: " + new Float(p.getX()).toString() + ", " + new Float(p.getY()).toString() + ", " + new Float(p.getZ()).toString());
							
							RESULT = _t;
						
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Angle*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Home ::= BLOCK_BEGIN HOME Triplet BLOCK_END 
            {
              Object RESULT = null;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
							// #### debug
							Point p = (Point)_t;
							System.out.println("found home: " + new Float(p.getX()).toString() + ", " + new Float(p.getY()).toString() + ", " + new Float(p.getZ()).toString());

							RESULT = _t;
						
              CUP$parser$result = new java_cup.runtime.Symbol(24/*Home*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ScaleDelta ::= BLOCK_BEGIN SCALE_DELTA Triplet BLOCK_END 
            {
              Object RESULT = null;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
							// #### debug
							Point p = (Point)_t;
							System.out.println("found scale delta: " + new Float(p.getX()).toString() + ", " + new Float(p.getY()).toString() + ", " + new Float(p.getZ()).toString());

							RESULT = _t;
						
              CUP$parser$result = new java_cup.runtime.Symbol(35/*ScaleDelta*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MoveDelta ::= BLOCK_BEGIN MOVE_DELTA Triplet BLOCK_END 
            {
              Object RESULT = null;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
							// #### debug
							Point p = (Point)_t;
							System.out.println("found move delta: " + new Float(p.getX()).toString() + ", " + new Float(p.getY()).toString() + ", " + new Float(p.getZ()).toString());

							RESULT = _t;
						
              CUP$parser$result = new java_cup.runtime.Symbol(33/*MoveDelta*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Point ::= BLOCK_BEGIN POINT Triplet BLOCK_END 
            {
              Object RESULT = null;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
							// #### debug
							Point p = (Point)_t;
							System.out.println("found point: " + new Float(p.getX()).toString() + ", " + new Float(p.getY()).toString() + ", " + new Float(p.getZ()).toString());

							RESULT = _t;
						
              CUP$parser$result = new java_cup.runtime.Symbol(30/*Point*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Points ::= Points COMA Point 
            {
              Object RESULT = null;
		int _vectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _vectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _vector = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								// the vector has been instantiated by the trailing point
								((Vector)_vector).add(_p);
								RESULT = _vector;
							
              CUP$parser$result = new java_cup.runtime.Symbol(29/*Points*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Points ::= Point 
            {
              Object RESULT = null;
		int _pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = new Vector();
								((Vector)RESULT).add(_p);
							
              CUP$parser$result = new java_cup.runtime.Symbol(29/*Points*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Polygon ::= ARRAY_BEGIN Points ARRAY_END 
            {
              Object RESULT = null;
		int _vectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _vectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _vector = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
								// create an array of points
								Point []p = new Point[((Vector)_vector).size()];
								for (int i = 0; i < p.length; i++) {
									p[i] = (Point)((Vector)_vector).elementAt(i);
								}								
								
								RESULT = p;
							
              CUP$parser$result = new java_cup.runtime.Symbol(27/*Polygon*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MatrixLine ::= ARRAY_BEGIN DOUBLE COMA DOUBLE COMA DOUBLE ARRAY_END 
            {
              Object RESULT = null;
		int _d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object _d1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _d2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _d3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _d3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _d3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
								double a[] = new double[3];
							
								a[0] = ((Double)_d1).doubleValue();
								a[1] = ((Double)_d2).doubleValue();
								a[2] = ((Double)_d3).doubleValue();
								
								RESULT = a;
							
              CUP$parser$result = new java_cup.runtime.Symbol(37/*MatrixLine*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Matrix ::= ARRAY_BEGIN MatrixLine COMA MatrixLine COMA MatrixLine ARRAY_END 
            {
              Object RESULT = null;
		int _l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object _l1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _l2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _l3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _l3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _l3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
								// create a matrix of points
								Matrix m = new Matrix(3, 3);
								m.getValues()[0][0] = ((double[])_l1)[0];
								m.getValues()[0][1] = ((double[])_l1)[1];
								m.getValues()[0][2] = ((double[])_l1)[2];
								m.getValues()[1][0] = ((double[])_l2)[0];
								m.getValues()[1][1] = ((double[])_l2)[1];
								m.getValues()[1][2] = ((double[])_l2)[2];
								m.getValues()[2][0] = ((double[])_l3)[0];
								m.getValues()[2][1] = ((double[])_l3)[1];
								m.getValues()[2][2] = ((double[])_l3)[2];
								
								RESULT = m;
							
              CUP$parser$result = new java_cup.runtime.Symbol(36/*Matrix*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Transformation ::= BLOCK_BEGIN TRANSFORMATION_MATRIX Matrix BLOCK_END 
            {
              Object RESULT = null;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
								RESULT = _m;
							
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Transformation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Polygons ::= Polygons COMA Polygon 
            {
              Object RESULT = null;
		int _vectorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _vectorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _vector = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								// the vector has been instantiated by the trailing points array
								((Vector)_vector).add(_array);
								RESULT = _vector;
							
              CUP$parser$result = new java_cup.runtime.Symbol(28/*Polygons*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Polygons ::= Polygon 
            {
              Object RESULT = null;
		int _arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _array = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								RESULT = new Vector();
								((Vector)RESULT).add(_array);
							
              CUP$parser$result = new java_cup.runtime.Symbol(28/*Polygons*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TetrahedronDescription ::= TETRAHEDRON NAME Color Home Radius Height 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Integer r = (Integer)_r,
										h = (Integer)_h;
								
								Tetrahedron m = new Tetrahedron(r.intValue() * 2, h.intValue());
								m.setHome((Point)_p);
								m.setColor((Color)_c);
								m.setName(new String((String)_n));

								// #### debug
								System.out.println("created tetrahedron " + m.getName());

								RESULT = m;
							
              CUP$parser$result = new java_cup.runtime.Symbol(13/*TetrahedronDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PyramidDescription ::= PYRAMID NAME Color Home Radius Height 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Integer r = (Integer)_r,
										h = (Integer)_h;
								
								Pyramid m = new Pyramid(r.intValue() * 2, h.intValue());
								m.setHome((Point)_p);
								m.setColor((Color)_c);
								m.setName(new String((String)_n));

								// #### debug
								System.out.println("created pyramid " + m.getName());

								RESULT = m;
							
              CUP$parser$result = new java_cup.runtime.Symbol(12/*PyramidDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CylinderDescription ::= CYLINDER NAME Color Home Radius Height 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Integer r = (Integer)_r,
										h = (Integer)_h;
								
								Cylinder m = new Cylinder(r.intValue() * 2, h.intValue());
								m.setHome((Point)_p);
								m.setColor((Color)_c);
								m.setName(new String((String)_n));

								// #### debug
								System.out.println("created cylinder " + m.getName());

								RESULT = m;
							
              CUP$parser$result = new java_cup.runtime.Symbol(10/*CylinderDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ConeDescription ::= CONE NAME Color Home Radius Height 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Integer r = (Integer)_r,
										h = (Integer)_h;
								
								Cone m = new Cone(r.intValue() * 2, h.intValue());
								m.setHome((Point)_p);
								m.setColor((Color)_c);
								m.setName(new String((String)_n));

								// #### debug
								System.out.println("created cone " + m.getName());

								RESULT = m;
							
              CUP$parser$result = new java_cup.runtime.Symbol(11/*ConeDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SphereDescription ::= SPHERE NAME Color Home Radius 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Integer r = (Integer)_r;
								Sphere m = new Sphere(r.intValue() * 2);
								m.setHome((Point)_p);
								m.setColor((Color)_c);
								m.setName(new String((String)_n));

								// #### debug
								System.out.println("created sphere " + m.getName());

								RESULT = m;
							
              CUP$parser$result = new java_cup.runtime.Symbol(9/*SphereDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TorusDescription ::= TORUS NAME Color Home Radius 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Integer r = (Integer)_r;
								Torus m = new Torus(r.intValue() * 2);
								m.setHome((Point)_p);
								m.setColor((Color)_c);
								m.setName(new String((String)_n));

								// #### debug
								System.out.println("created torus " + m.getName());

								RESULT = m;
							
              CUP$parser$result = new java_cup.runtime.Symbol(8/*TorusDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DiskDescription ::= DISK NAME Color Home Radius 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Integer r = (Integer)_r;
								Disk m = new Disk(r.intValue() * 2);
								m.setHome((Point)_p);
								m.setColor((Color)_c);
								m.setName(new String((String)_n));

								// #### debug
								System.out.println("created disk " + m.getName());

								RESULT = m;
							
              CUP$parser$result = new java_cup.runtime.Symbol(7/*DiskDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BoxDescription ::= BOX NAME Color Home Width Height Depth 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer _w = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _d = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
								Integer w = (Integer)_w, 
										h = (Integer)_h, 
										d = (Integer)_d;
								Box m = new Box(w.intValue(), h.intValue(), d.intValue());
								m.setHome((Point)_p);
								m.setColor((Color)_c);
								m.setName(new String((String)_n));

								// #### debug
								System.out.println("created box " + m.getName());

								RESULT = m;
							
              CUP$parser$result = new java_cup.runtime.Symbol(6/*BoxDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FreeDescription ::= MODEL NAME Color Home BLOCK_BEGIN POLYGONS Polygons BLOCK_END 
            {
              Object RESULT = null;
		int _nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object _n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object _c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _polyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _polyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _poly = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
								Model m = new Model((Color)_c);
								m.setHome((Point)_p);
								m.setColor((Color)_c);
								m.setName(new String((String)_n));
								Iterator i = ((Vector)_poly).iterator();
								while (i.hasNext()) {
									Point []polygon = (Point[])i.next();
									m.addPolygon(polygon);
								}
								RESULT = m;
							
              CUP$parser$result = new java_cup.runtime.Symbol(5/*FreeDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TransformDescription ::= ReparentDescription 
            {
              Object RESULT = null;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = _t;
              CUP$parser$result = new java_cup.runtime.Symbol(17/*TransformDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TransformDescription ::= ScalingDescription 
            {
              Object RESULT = null;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = _t;
              CUP$parser$result = new java_cup.runtime.Symbol(17/*TransformDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TransformDescription ::= CompositionDescription 
            {
              Object RESULT = null;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = _t;
              CUP$parser$result = new java_cup.runtime.Symbol(17/*TransformDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TransformDescription ::= TranslationDescription 
            {
              Object RESULT = null;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = _t;
              CUP$parser$result = new java_cup.runtime.Symbol(17/*TransformDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TransformDescription ::= RotationDescription 
            {
              Object RESULT = null;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = _t;
              CUP$parser$result = new java_cup.runtime.Symbol(17/*TransformDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Transform ::= BLOCK_BEGIN TransformDescription BLOCK_END 
            {
              Object RESULT = null;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = _t;
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Transform*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TransformList ::= TransformList COMA Transform 
            {
              Object RESULT = null;
		int _lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							// the vector has been instantiated by the trailing transform
							((Vector)_l).add(_t);
							RESULT = _l;
						
              CUP$parser$result = new java_cup.runtime.Symbol(16/*TransformList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TransformList ::= Transform 
            {
              Object RESULT = null;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = new Vector();
							((Vector)RESULT).add(_t);
						
              CUP$parser$result = new java_cup.runtime.Symbol(16/*TransformList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Transforms ::= BLOCK_BEGIN TRANSFORMS TransformList BLOCK_END 
            {
              Object RESULT = null;
		int _lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = _l;
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Transforms*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ModelList ::= ModelList COMA Model 
            {
              Object RESULT = null;
		int _lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							// the vector has been instantiated by the trailing model
							((Vector)_l).add(_m);
							RESULT = _l;
						
              CUP$parser$result = new java_cup.runtime.Symbol(2/*ModelList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ModelList ::= Model 
            {
              Object RESULT = null;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
							RESULT = new Vector();
							((Vector)RESULT).add(_m);
						
              CUP$parser$result = new java_cup.runtime.Symbol(2/*ModelList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Children ::= BLOCK_BEGIN CHILDREN ModelList BLOCK_END 
            {
              Object RESULT = null;
		int _lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = _l;
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Children*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ModelDescription ::= TetrahedronDescription 
            {
              Object RESULT = null;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = _m;
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ModelDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ModelDescription ::= PyramidDescription 
            {
              Object RESULT = null;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = _m;
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ModelDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ModelDescription ::= CylinderDescription 
            {
              Object RESULT = null;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = _m;
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ModelDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ModelDescription ::= ConeDescription 
            {
              Object RESULT = null;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = _m;
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ModelDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ModelDescription ::= SphereDescription 
            {
              Object RESULT = null;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = _m;
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ModelDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ModelDescription ::= TorusDescription 
            {
              Object RESULT = null;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = _m;
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ModelDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ModelDescription ::= DiskDescription 
            {
              Object RESULT = null;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = _m;
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ModelDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ModelDescription ::= BoxDescription 
            {
              Object RESULT = null;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = _m;
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ModelDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ModelDescription ::= FreeDescription 
            {
              Object RESULT = null;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = _m;
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ModelDescription*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Model ::= BLOCK_BEGIN ModelDescription Transformation BLOCK_END 
            {
              Object RESULT = null;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _rs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					Model 	m = (Model)_m;

					// apply transformations to the model
					((Model)_m).setTransformation((Matrix)_rs); 

					// add the new model to the editor
					Editor.editor.getModels().add(m);

					// #### debug
					System.out.println("added model " + m.getName() + " to the editor");

					RESULT = m;
				
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Model*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Model ::= BLOCK_BEGIN ModelDescription Transformation Transforms BLOCK_END 
            {
              Object RESULT = null;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _rs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					Model 	m = (Model)_m;
					Vector  t = (Vector)_t;

					// apply transformations to the model
					((Model)_m).setTransformation((Matrix)_rs); 

					// add the new model to the editor
					Editor.editor.getModels().add(m);
					
					// #### debug
					System.out.println("added model " + m.getName() + " to the editor");

					// transform the model or its descendence
					Iterator i = t.iterator();
					while (i.hasNext()) {
						Transform.TransformAction transform = (Transform.TransformAction)i.next();
						transform.apply(m);
					}

					RESULT = m;
				
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Model*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Model ::= BLOCK_BEGIN ModelDescription Children Transformation BLOCK_END 
            {
              Object RESULT = null;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _rs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					Model 	m = (Model)_m;
					Vector	c = (Vector)_c;

					// add the new model to the editor
					Editor.editor.getModels().add(m);
					
					// #### debug
					System.out.println("added model " + m.getName() + " to the editor");

					// add the children to the new model 
					Iterator i = c.iterator(); 
					while (i.hasNext()) {
						Model child = (Model)i.next();
						m.addChild(child);
						Editor.editor.getModels().remove(child);
					}

					// apply transformations to the model
					((Model)_m).setTransformation((Matrix)_rs); 

					RESULT = m;
				
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Model*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Model EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Model ::= BLOCK_BEGIN ModelDescription Children Transformation Transforms BLOCK_END 
            {
              Object RESULT = null;
		int _mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object _c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _rs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					Model 	m = (Model)_m;
					Vector	c = (Vector)_c;
					Vector  t = (Vector)_t;
					
					// add the new model to the editor
					Editor.editor.getModels().add(m);
					
					// #### debug
					System.out.println("added model " + m.getName() + " to the editor");
					
					// add the children to the new model 
					Iterator i = c.iterator(); 
					while (i.hasNext()) {
						Model child = (Model)i.next();
						m.addChild(child);

						Editor.editor.getModels().remove(child);
					}
					
					// apply transformations to the model
					((Model)_m).setTransformation((Matrix)_rs); 

					// transform the model or its descendence
					i = t.iterator();
					while (i.hasNext()) {
						Transform.TransformAction transform = (Transform.TransformAction)i.next();
						transform.apply(m);
					}
					
					RESULT = m;
				
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Model*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

